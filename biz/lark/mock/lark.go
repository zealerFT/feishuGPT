// Code generated by MockGen. DO NOT EDIT.
// Source: feishu/biz/Lark (interfaces: Lark)

// Package larkmock is a generated GoMock package.
package larkmock

import (
	context "context"
	model "feishu/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	larkim "github.com/larksuite/oapi-sdk-go/v3/service/im/v1"
)

// MockLark is a mock of Lark interface.
type MockLark struct {
	ctrl     *gomock.Controller
	recorder *MockLarkMockRecorder
}

// MockLarkMockRecorder is the mock recorder for MockLark.
type MockLarkMockRecorder struct {
	mock *MockLark
}

// NewMockLark creates a new mock instance.
func NewMockLark(ctrl *gomock.Controller) *MockLark {
	mock := &MockLark{ctrl: ctrl}
	mock.recorder = &MockLarkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLark) EXPECT() *MockLarkMockRecorder {
	return m.recorder
}

// GroupInfo mocks base method.
func (m *MockLark) GroupInfo(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupInfo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupInfo indicates an expected call of GroupInfo.
func (mr *MockLarkMockRecorder) GroupInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupInfo", reflect.TypeOf((*MockLark)(nil).GroupInfo), arg0, arg1)
}

// GroupList mocks base method.
func (m *MockLark) GroupList(arg0 context.Context) ([]*larkim.ListChat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupList", arg0)
	ret0, _ := ret[0].([]*larkim.ListChat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupList indicates an expected call of GroupList.
func (mr *MockLarkMockRecorder) GroupList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupList", reflect.TypeOf((*MockLark)(nil).GroupList), arg0)
}

// GroupMessageCreate mocks base method.
func (m *MockLark) GroupMessageCreate(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupMessageCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GroupMessageCreate indicates an expected call of GroupMessageCreate.
func (mr *MockLarkMockRecorder) GroupMessageCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupMessageCreate", reflect.TypeOf((*MockLark)(nil).GroupMessageCreate), arg0, arg1, arg2)
}

// OpenaiReply mocks base method.
func (m *MockLark) OpenaiReply(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenaiReply", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenaiReply indicates an expected call of OpenaiReply.
func (mr *MockLarkMockRecorder) OpenaiReply(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenaiReply", reflect.TypeOf((*MockLark)(nil).OpenaiReply), arg0, arg1, arg2, arg3, arg4)
}

// ReactionReply mocks base method.
func (m *MockLark) ReactionReply(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReactionReply", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReactionReply indicates an expected call of ReactionReply.
func (mr *MockLarkMockRecorder) ReactionReply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReactionReply", reflect.TypeOf((*MockLark)(nil).ReactionReply), arg0, arg1)
}

// SendArgocdMsg mocks base method.
func (m *MockLark) SendArgocdMsg(arg0 context.Context, arg1 model.ArgocdBody, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendArgocdMsg", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendArgocdMsg indicates an expected call of SendArgocdMsg.
func (mr *MockLarkMockRecorder) SendArgocdMsg(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendArgocdMsg", reflect.TypeOf((*MockLark)(nil).SendArgocdMsg), arg0, arg1, arg2, arg3)
}

// SendImagesSyncMsg mocks base method.
func (m *MockLark) SendImagesSyncMsg(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendImagesSyncMsg", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendImagesSyncMsg indicates an expected call of SendImagesSyncMsg.
func (mr *MockLarkMockRecorder) SendImagesSyncMsg(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendImagesSyncMsg", reflect.TypeOf((*MockLark)(nil).SendImagesSyncMsg), arg0, arg1, arg2, arg3)
}

// SendInteractiveMonitorMsg mocks base method.
func (m *MockLark) SendInteractiveMonitorMsg(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInteractiveMonitorMsg", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendInteractiveMonitorMsg indicates an expected call of SendInteractiveMonitorMsg.
func (mr *MockLarkMockRecorder) SendInteractiveMonitorMsg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInteractiveMonitorMsg", reflect.TypeOf((*MockLark)(nil).SendInteractiveMonitorMsg), arg0, arg1, arg2)
}

// SendInteractiveMsg mocks base method.
func (m *MockLark) SendInteractiveMsg(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInteractiveMsg", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendInteractiveMsg indicates an expected call of SendInteractiveMsg.
func (mr *MockLarkMockRecorder) SendInteractiveMsg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInteractiveMsg", reflect.TypeOf((*MockLark)(nil).SendInteractiveMsg), arg0, arg1, arg2)
}

// SendJarvisMsg mocks base method.
func (m *MockLark) SendJarvisMsg(arg0 context.Context, arg1 model.Jarvis, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendJarvisMsg", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendJarvisMsg indicates an expected call of SendJarvisMsg.
func (mr *MockLarkMockRecorder) SendJarvisMsg(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendJarvisMsg", reflect.TypeOf((*MockLark)(nil).SendJarvisMsg), arg0, arg1, arg2, arg3)
}
