// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/lark_service.proto

package go_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LarkServiceClient is the client API for LarkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LarkServiceClient interface {
	// k8s -yaml的images tag更新通知（auto deploy 完成动作）
	AppImageTagUpdate(ctx context.Context, in *AppImageTagUpdateRequest, opts ...grpc.CallOption) (*AppImageTagUpdateResponse, error)
	// 镜像同步完成通知
	ImagesSyncDone(ctx context.Context, in *ImagesSyncDoneRequest, opts ...grpc.CallOption) (*ImagesSyncDoneResponse, error)
}

type larkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLarkServiceClient(cc grpc.ClientConnInterface) LarkServiceClient {
	return &larkServiceClient{cc}
}

func (c *larkServiceClient) AppImageTagUpdate(ctx context.Context, in *AppImageTagUpdateRequest, opts ...grpc.CallOption) (*AppImageTagUpdateResponse, error) {
	out := new(AppImageTagUpdateResponse)
	err := c.cc.Invoke(ctx, "/lark.LarkService/AppImageTagUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *larkServiceClient) ImagesSyncDone(ctx context.Context, in *ImagesSyncDoneRequest, opts ...grpc.CallOption) (*ImagesSyncDoneResponse, error) {
	out := new(ImagesSyncDoneResponse)
	err := c.cc.Invoke(ctx, "/lark.LarkService/ImagesSyncDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LarkServiceServer is the server API for LarkService service.
// All implementations must embed UnimplementedLarkServiceServer
// for forward compatibility
type LarkServiceServer interface {
	// k8s -yaml的images tag更新通知（auto deploy 完成动作）
	AppImageTagUpdate(context.Context, *AppImageTagUpdateRequest) (*AppImageTagUpdateResponse, error)
	// 镜像同步完成通知
	ImagesSyncDone(context.Context, *ImagesSyncDoneRequest) (*ImagesSyncDoneResponse, error)
	mustEmbedUnimplementedLarkServiceServer()
}

// UnimplementedLarkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLarkServiceServer struct {
}

func (UnimplementedLarkServiceServer) AppImageTagUpdate(context.Context, *AppImageTagUpdateRequest) (*AppImageTagUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppImageTagUpdate not implemented")
}
func (UnimplementedLarkServiceServer) ImagesSyncDone(context.Context, *ImagesSyncDoneRequest) (*ImagesSyncDoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImagesSyncDone not implemented")
}
func (UnimplementedLarkServiceServer) mustEmbedUnimplementedLarkServiceServer() {}

// UnsafeLarkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LarkServiceServer will
// result in compilation errors.
type UnsafeLarkServiceServer interface {
	mustEmbedUnimplementedLarkServiceServer()
}

func RegisterLarkServiceServer(s grpc.ServiceRegistrar, srv LarkServiceServer) {
	s.RegisterService(&LarkService_ServiceDesc, srv)
}

func _LarkService_AppImageTagUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppImageTagUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LarkServiceServer).AppImageTagUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lark.LarkService/AppImageTagUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LarkServiceServer).AppImageTagUpdate(ctx, req.(*AppImageTagUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LarkService_ImagesSyncDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImagesSyncDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LarkServiceServer).ImagesSyncDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lark.LarkService/ImagesSyncDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LarkServiceServer).ImagesSyncDone(ctx, req.(*ImagesSyncDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LarkService_ServiceDesc is the grpc.ServiceDesc for LarkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LarkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lark.LarkService",
	HandlerType: (*LarkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppImageTagUpdate",
			Handler:    _LarkService_AppImageTagUpdate_Handler,
		},
		{
			MethodName: "ImagesSyncDone",
			Handler:    _LarkService_ImagesSyncDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lark_service.proto",
}
